Context와 AsyncStorage

1. 리액트에서 데이터를 다루는 방법에는 Props, State, Context가 있다. 이 세 가지는 앱이 종료되거나 다시 실행되면 데이터는 사라지게 된다. 
   데이터 유지를 위해 AsyncStorage를 사용해 데이터를 앱 내에 저장한다.

2. Flux와 Context API : Context는 부모 컴포넌트로부터 자식 컴포넌트로 전달되는 데이터의 흐름과는 상관없이 전역적으로 사용되는 데이터를 다룬다. 전역데이터를 context에 저장한 후, 필요한 컴포넌트에서 해당 데이터를 불러와 사용한다.

3. Context API : Context의 Provider와 Consumer 생성
   공통 부모 컴포넌트에 Context Provider를 사용하여 데이터를 제공.
   데이터를 사용하려는 컴포넌트에서 Context의 Consumer를 사용하여 실제 데이터를 사용(소비)한다.

4. AsyncStorage : 리액트에서 데이터를 다루는 Props와 State, Context는 휘발성이다. 이 데이터는 메모리에서만 존재하고 물리적으로 데이터를 저장하지 않는다.
   데이터들은 API를 통해 서버에 저장하여 사용하거나 앱 내에 저장하여 사용하는 경우가 많다.
   AsyncStorage는 앱 내에서 간단하게 데이터를 저장할 수 있는 저장소이다. 

5. 리액트 네이티브 CLI 명령어를 사용하여 할 일 리스트 프로젝트 생성 : react-native init TodoList

6. AsyncStorage 설치 및 설정 : npm install --save @react-native-community/async-storage

7. useEffect : 함수형 컴포넌트에서 클래스형 컴포넌트의 라이프 사이클 함수와 비슷한 역할
   useEffect(()=>{
      initData();
   }. []);
   
   - 첫 번째 매개변수에는 함수를 설정하여 useEffect의 역할을 정의
   - 두 번째 매개변수에는 배열을 전달하는데 빈 배열을 전달하면, 클래스형 컴포넌트의 componentDidMount와 같은 역할을 수행한다. 즉, 컴포넌트가 처음 화면에 표시된 후 한 번만 호출된다.
   - 두 번째 매개변수를 설정하지 않는 경우, componentDidMount와 componentDidUpdate의 역할을 동시에 수행한다. 즉, 컴포넌트가 처음 화면에 표시 된 후에도 실행되며, Props나 State의 변경에 의해 컴포넌트가 리렌더링된 후에도 실행된다.
   - useEffect만의 고유한 기능으로 두 번째 매개변수로 배열을 전달할 수 있다. 이 두 번째 매개변수 배열에 특정 변수를 설정하여 전달하면, 모든 Props와 State에 변경에 호출되는 componentDidUpdate와 다르게 전달된 변수가 변경될 때만, 이 함수가 호출된다.
